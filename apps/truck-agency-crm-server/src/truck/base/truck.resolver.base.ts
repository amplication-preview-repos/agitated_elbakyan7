/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Truck } from "./Truck";
import { TruckCountArgs } from "./TruckCountArgs";
import { TruckFindManyArgs } from "./TruckFindManyArgs";
import { TruckFindUniqueArgs } from "./TruckFindUniqueArgs";
import { CreateTruckArgs } from "./CreateTruckArgs";
import { UpdateTruckArgs } from "./UpdateTruckArgs";
import { DeleteTruckArgs } from "./DeleteTruckArgs";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { TruckService } from "../truck.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Truck)
export class TruckResolverBase {
  constructor(
    protected readonly service: TruckService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "any",
  })
  async _trucksMeta(
    @graphql.Args() args: TruckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Truck])
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "any",
  })
  async trucks(@graphql.Args() args: TruckFindManyArgs): Promise<Truck[]> {
    return this.service.trucks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Truck, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "own",
  })
  async truck(
    @graphql.Args() args: TruckFindUniqueArgs
  ): Promise<Truck | null> {
    const result = await this.service.truck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Truck)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "create",
    possession: "any",
  })
  async createTruck(@graphql.Args() args: CreateTruckArgs): Promise<Truck> {
    return await this.service.createTruck({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Truck)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async updateTruck(
    @graphql.Args() args: UpdateTruckArgs
  ): Promise<Truck | null> {
    try {
      return await this.service.updateTruck({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Truck)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "delete",
    possession: "any",
  })
  async deleteTruck(
    @graphql.Args() args: DeleteTruckArgs
  ): Promise<Truck | null> {
    try {
      return await this.service.deleteTruck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Trip], { name: "trips" })
  @nestAccessControl.UseRoles({
    resource: "Trip",
    action: "read",
    possession: "any",
  })
  async findTrips(
    @graphql.Parent() parent: Truck,
    @graphql.Args() args: TripFindManyArgs
  ): Promise<Trip[]> {
    const results = await this.service.findTrips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
